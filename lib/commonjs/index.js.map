{"version":3,"sources":["index.tsx"],"names":["JWPLAYER_TAG","ImpresaJwplayerComponent","ImpresaJwplayerViewManager","props","ref","uiComponentRef","nativeCommands","UIManager","getViewManagerConfig","Commands","sendCommand","command","localNativeCommand","undefined","playerNodeHandle","current","dispatchViewManagerCommand","play","pause","toggleFullScreen","destroy","playPauseWhenVisible","isVisible","file","WrapperJwPlayer","React","forwardRef","memo"],"mappings":";;;;;;;AAEA;;AACA;;AAMA;;;;;;;;;;AAuBA,MAAMA,YAAY,GAAG,qBAArB;AACO,MAAMC,wBAAwB,GACnC,yCAA6CD,YAA7C,CADK;;;AAEP,SAASE,0BAAT,CAAoCC,KAApC,EAAiEC,GAAjE,EAA2E;AACzE,QAAMC,cAAc,gBAAG,uBAAvB;;AACA,QAAMC,cAAc,GAAGC,uBAAUC,oBAAV,CAA+BR,YAA/B,EAA6CS,QAApE;;AAEA,QAAMC,WAAW,GAAIC,OAAD,IAAa;AAC/B,UAAMC,kBAAkB,GAAGN,cAAc,CAACK,OAAD,CAAzC;;AAEA,QAAIC,kBAAkB,KAAKC,SAA3B,EAAsC;AACpC;AACD;AACD;;;AACA,UAAMC,gBAAgB,GAAG,iCAAeT,cAAc,CAACU,OAA9B,CAAzB;;AACAR,2BAAUS,0BAAV,CACEF,gBADF,EAEEF,kBAFF,EAGE,EAHF;AAKD,GAbD;;AAeA,kCAAoBR,GAApB,EAAyB,OAAO;AAC9Ba,IAAAA,IAAI,EAAE,MAAM;AACVP,MAAAA,WAAW,CAAC,MAAD,CAAX;AACD,KAH6B;AAI9BQ,IAAAA,KAAK,EAAE,MAAM;AACXR,MAAAA,WAAW,CAAC,OAAD,CAAX;AACD,KAN6B;AAO9BS,IAAAA,gBAAgB,EAAE,MAAM;AACtBT,MAAAA,WAAW,CAAC,kBAAD,CAAX;AACD,KAT6B;AAU9BU,IAAAA,OAAO,EAAE,MAAM;AACbV,MAAAA,WAAW,CAAC,SAAD,CAAX;AACD;AAZ6B,GAAP,CAAzB;AAeA,sBACE,6BAAC,mBAAD;AACE,IAAA,QAAQ,EAAE,CAACP,KAAK,CAACkB,oBADnB;AAEE,IAAA,QAAQ,EAAGC,SAAD,IAAe;AACvB,UAAInB,KAAK,CAACkB,oBAAV,EAAgC;AAC9BC,QAAAA,SAAS,GAAGZ,WAAW,CAAC,MAAD,CAAd,GAAyBA,WAAW,CAAC,OAAD,CAA7C;AACD;AACF;AANH,kBAQE,6BAAC,eAAD;AACE,IAAA,GAAG,EAAEP,KAAK,CAACoB;AACX;AAFF;AAGE,IAAA,GAAG,EAAElB,cAHP;AAIE,IAAA,SAAS,EAAE,MAAM;AACfK,MAAAA,WAAW,CAAC,SAAD,CAAX;AACD;AANH,KAOMP,KAPN,EARF,CADF;AAoBD;;AAED,MAAMqB,eAA+C,gBAAGC,eAAMC,UAAN,CACtD,CAACvB,KAAD,EAAQC,GAAR,KAAgB;AACd,QAAME,cAAc,GAClBC,uBAAUC,oBAAV,CAA+BR,YAA/B,EAA6CS,QAD/C;;AAGA,wBAAU,MAAM;AACd,WAAO,MAAM;AACX;AACA,YAAM;AAAEM,QAAAA;AAAF,UAAcX,GAApB;;AACA,UAAIW,OAAJ,EAAa;AACX,cAAMD,gBAAgB,GAAG,iCAAeC,OAAf,CAAzB;;AACAR,+BAAUS,0BAAV,CACEF,gBADF,EAEER,cAAc,CAACc,OAFjB,EAGE,EAHF;AAKD;AACF,KAXD,CADc,CAad;AACD,GAdD,EAcG,CAAChB,GAAD,CAdH;AAeA,sBAAO,6BAAC,wBAAD,eAA8BD,KAA9B;AAAqC,IAAA,GAAG,EAAEC;AAA1C,KAAP;AACD,CArBqD,CAAxD;;4BAwBeqB,eAAME,IAAN,eAAWF,eAAMC,UAAN,CAAiBxB,0BAAjB,CAAX,C","sourcesContent":["// @ts-nocheck\n\nimport React, { createRef, useEffect, useImperativeHandle } from 'react';\nimport {\n  findNodeHandle,\n  requireNativeComponent,\n  UIManager,\n  ViewStyle,\n} from 'react-native';\nimport InViewPort from './InViewPort';\n\ntype ImpresaJwplayerProps = {\n  licenseKey?: string;\n  file?: string;\n  style?: ViewStyle;\n  imageFile?: string;\n  volume?: number;\n  autostart?: boolean;\n  repeatVideo?: boolean;\n  controls?: boolean;\n  onFullScreen?: Function;\n  onFullScreenExit?: Function;\n  onPlay?: Function;\n  onPause?: Function;\n  ref?: any;\n  adSchedule?: Array<{ tag: String; offset: string }>;\n  mediaId?: string;\n  title?: string;\n  desc?: string;\n  playPauseWhenVisible?: boolean;\n};\n\nconst JWPLAYER_TAG = 'ImpresaJwplayerView';\nexport const ImpresaJwplayerComponent =\n  requireNativeComponent<ImpresaJwplayerProps>(JWPLAYER_TAG);\nfunction ImpresaJwplayerViewManager(props: ImpresaJwplayerProps, ref: any) {\n  const uiComponentRef = createRef();\n  const nativeCommands = UIManager.getViewManagerConfig(JWPLAYER_TAG).Commands;\n\n  const sendCommand = (command) => {\n    const localNativeCommand = nativeCommands[command];\n\n    if (localNativeCommand === undefined) {\n      return;\n    }\n    /* @ts-ignore */\n    const playerNodeHandle = findNodeHandle(uiComponentRef.current);\n    UIManager.dispatchViewManagerCommand(\n      playerNodeHandle,\n      localNativeCommand,\n      []\n    );\n  };\n\n  useImperativeHandle(ref, () => ({\n    play: () => {\n      sendCommand('play');\n    },\n    pause: () => {\n      sendCommand('pause');\n    },\n    toggleFullScreen: () => {\n      sendCommand('toggleFullScreen');\n    },\n    destroy: () => {\n      sendCommand('destroy');\n    },\n  }));\n\n  return (\n    <InViewPort\n      disabled={!props.playPauseWhenVisible}\n      onChange={(isVisible) => {\n        if (props.playPauseWhenVisible) {\n          isVisible ? sendCommand('play') : sendCommand('pause');\n        }\n      }}\n    >\n      <WrapperJwPlayer\n        key={props.file}\n        /* @ts-ignore */\n        ref={uiComponentRef}\n        onDestroy={() => {\n          sendCommand('destroy');\n        }}\n        {...props}\n      />\n    </InViewPort>\n  );\n}\n\nconst WrapperJwPlayer: React.FC<ImpresaJwplayerProps> = React.forwardRef(\n  (props, ref) => {\n    const nativeCommands =\n      UIManager.getViewManagerConfig(JWPLAYER_TAG).Commands;\n\n    useEffect(() => {\n      return () => {\n        /* @ts-ignore */\n        const { current } = ref;\n        if (current) {\n          const playerNodeHandle = findNodeHandle(current);\n          UIManager.dispatchViewManagerCommand(\n            playerNodeHandle,\n            nativeCommands.destroy,\n            []\n          );\n        }\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ref]);\n    return <ImpresaJwplayerComponent {...props} ref={ref} />;\n  }\n);\n\nexport default React.memo(React.forwardRef(ImpresaJwplayerViewManager));\n"]}